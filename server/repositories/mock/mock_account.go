// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/quocbang/grpc-gateway/server/repositories"
	mock "github.com/stretchr/testify/mock"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

type Account_Expecter struct {
	mock *mock.Mock
}

func (_m *Account) EXPECT() *Account_Expecter {
	return &Account_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: _a0, _a1
func (_m *Account) CreateAccount(_a0 context.Context, _a1 repositories.CreateAccountRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateAccountRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Account_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Account_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.CreateAccountRequest
func (_e *Account_Expecter) CreateAccount(_a0 interface{}, _a1 interface{}) *Account_CreateAccount_Call {
	return &Account_CreateAccount_Call{Call: _e.mock.On("CreateAccount", _a0, _a1)}
}

func (_c *Account_CreateAccount_Call) Run(run func(_a0 context.Context, _a1 repositories.CreateAccountRequest)) *Account_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateAccountRequest))
	})
	return _c
}

func (_c *Account_CreateAccount_Call) Return(_a0 error) *Account_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Account_CreateAccount_Call) RunAndReturn(run func(context.Context, repositories.CreateAccountRequest) error) *Account_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSessions provides a mock function with given fields: _a0, _a1
func (_m *Account) CreateSessions(_a0 context.Context, _a1 repositories.CreateSessionsRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateSessionsRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Account_CreateSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSessions'
type Account_CreateSessions_Call struct {
	*mock.Call
}

// CreateSessions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.CreateSessionsRequest
func (_e *Account_Expecter) CreateSessions(_a0 interface{}, _a1 interface{}) *Account_CreateSessions_Call {
	return &Account_CreateSessions_Call{Call: _e.mock.On("CreateSessions", _a0, _a1)}
}

func (_c *Account_CreateSessions_Call) Run(run func(_a0 context.Context, _a1 repositories.CreateSessionsRequest)) *Account_CreateSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateSessionsRequest))
	})
	return _c
}

func (_c *Account_CreateSessions_Call) Return(_a0 error) *Account_CreateSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Account_CreateSessions_Call) RunAndReturn(run func(context.Context, repositories.CreateSessionsRequest) error) *Account_CreateSessions_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVerifyAccount provides a mock function with given fields: _a0, _a1
func (_m *Account) CreateVerifyAccount(_a0 context.Context, _a1 repositories.CreateVerifyAccountRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateVerifyAccountRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Account_CreateVerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerifyAccount'
type Account_CreateVerifyAccount_Call struct {
	*mock.Call
}

// CreateVerifyAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.CreateVerifyAccountRequest
func (_e *Account_Expecter) CreateVerifyAccount(_a0 interface{}, _a1 interface{}) *Account_CreateVerifyAccount_Call {
	return &Account_CreateVerifyAccount_Call{Call: _e.mock.On("CreateVerifyAccount", _a0, _a1)}
}

func (_c *Account_CreateVerifyAccount_Call) Run(run func(_a0 context.Context, _a1 repositories.CreateVerifyAccountRequest)) *Account_CreateVerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateVerifyAccountRequest))
	})
	return _c
}

func (_c *Account_CreateVerifyAccount_Call) Return(_a0 error) *Account_CreateVerifyAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Account_CreateVerifyAccount_Call) RunAndReturn(run func(context.Context, repositories.CreateVerifyAccountRequest) error) *Account_CreateVerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: _a0, _a1
func (_m *Account) GetAccount(_a0 context.Context, _a1 repositories.GetAccountRequest) (repositories.GetAccountReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.GetAccountReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetAccountRequest) (repositories.GetAccountReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetAccountRequest) repositories.GetAccountReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.GetAccountReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Account_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Account_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.GetAccountRequest
func (_e *Account_Expecter) GetAccount(_a0 interface{}, _a1 interface{}) *Account_GetAccount_Call {
	return &Account_GetAccount_Call{Call: _e.mock.On("GetAccount", _a0, _a1)}
}

func (_c *Account_GetAccount_Call) Run(run func(_a0 context.Context, _a1 repositories.GetAccountRequest)) *Account_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.GetAccountRequest))
	})
	return _c
}

func (_c *Account_GetAccount_Call) Return(_a0 repositories.GetAccountReply, _a1 error) *Account_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Account_GetAccount_Call) RunAndReturn(run func(context.Context, repositories.GetAccountRequest) (repositories.GetAccountReply, error)) *Account_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessions provides a mock function with given fields: _a0, _a1
func (_m *Account) GetSessions(_a0 context.Context, _a1 repositories.GetSessionsRequest) (repositories.GetSessionsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.GetSessionsReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetSessionsRequest) (repositories.GetSessionsReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetSessionsRequest) repositories.GetSessionsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.GetSessionsReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetSessionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Account_GetSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessions'
type Account_GetSessions_Call struct {
	*mock.Call
}

// GetSessions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.GetSessionsRequest
func (_e *Account_Expecter) GetSessions(_a0 interface{}, _a1 interface{}) *Account_GetSessions_Call {
	return &Account_GetSessions_Call{Call: _e.mock.On("GetSessions", _a0, _a1)}
}

func (_c *Account_GetSessions_Call) Run(run func(_a0 context.Context, _a1 repositories.GetSessionsRequest)) *Account_GetSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.GetSessionsRequest))
	})
	return _c
}

func (_c *Account_GetSessions_Call) Return(_a0 repositories.GetSessionsReply, _a1 error) *Account_GetSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Account_GetSessions_Call) RunAndReturn(run func(context.Context, repositories.GetSessionsRequest) (repositories.GetSessionsReply, error)) *Account_GetSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnVerifyAccount provides a mock function with given fields: _a0, _a1
func (_m *Account) GetUnVerifyAccount(_a0 context.Context, _a1 repositories.GetUnVerifyAccountRequest) (repositories.GetUnVerifyAccountReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.GetUnVerifyAccountReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetUnVerifyAccountRequest) (repositories.GetUnVerifyAccountReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetUnVerifyAccountRequest) repositories.GetUnVerifyAccountReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.GetUnVerifyAccountReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetUnVerifyAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Account_GetUnVerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnVerifyAccount'
type Account_GetUnVerifyAccount_Call struct {
	*mock.Call
}

// GetUnVerifyAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.GetUnVerifyAccountRequest
func (_e *Account_Expecter) GetUnVerifyAccount(_a0 interface{}, _a1 interface{}) *Account_GetUnVerifyAccount_Call {
	return &Account_GetUnVerifyAccount_Call{Call: _e.mock.On("GetUnVerifyAccount", _a0, _a1)}
}

func (_c *Account_GetUnVerifyAccount_Call) Run(run func(_a0 context.Context, _a1 repositories.GetUnVerifyAccountRequest)) *Account_GetUnVerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.GetUnVerifyAccountRequest))
	})
	return _c
}

func (_c *Account_GetUnVerifyAccount_Call) Return(_a0 repositories.GetUnVerifyAccountReply, _a1 error) *Account_GetUnVerifyAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Account_GetUnVerifyAccount_Call) RunAndReturn(run func(context.Context, repositories.GetUnVerifyAccountRequest) (repositories.GetUnVerifyAccountReply, error)) *Account_GetUnVerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *Account) Login(_a0 context.Context, _a1 repositories.LoginRequest) (repositories.LoginReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.LoginReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.LoginRequest) (repositories.LoginReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.LoginRequest) repositories.LoginReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.LoginReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Account_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Account_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.LoginRequest
func (_e *Account_Expecter) Login(_a0 interface{}, _a1 interface{}) *Account_Login_Call {
	return &Account_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *Account_Login_Call) Run(run func(_a0 context.Context, _a1 repositories.LoginRequest)) *Account_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.LoginRequest))
	})
	return _c
}

func (_c *Account_Login_Call) Return(_a0 repositories.LoginReply, _a1 error) *Account_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Account_Login_Call) RunAndReturn(run func(context.Context, repositories.LoginRequest) (repositories.LoginReply, error)) *Account_Login_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRole provides a mock function with given fields: _a0, _a1
func (_m *Account) UpdateUserRole(_a0 context.Context, _a1 repositories.UpdateUserRoleRequest) (repositories.CommonUpdateReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.CommonUpdateReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateUserRoleRequest) (repositories.CommonUpdateReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateUserRoleRequest) repositories.CommonUpdateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.CommonUpdateReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.UpdateUserRoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Account_UpdateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRole'
type Account_UpdateUserRole_Call struct {
	*mock.Call
}

// UpdateUserRole is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.UpdateUserRoleRequest
func (_e *Account_Expecter) UpdateUserRole(_a0 interface{}, _a1 interface{}) *Account_UpdateUserRole_Call {
	return &Account_UpdateUserRole_Call{Call: _e.mock.On("UpdateUserRole", _a0, _a1)}
}

func (_c *Account_UpdateUserRole_Call) Run(run func(_a0 context.Context, _a1 repositories.UpdateUserRoleRequest)) *Account_UpdateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.UpdateUserRoleRequest))
	})
	return _c
}

func (_c *Account_UpdateUserRole_Call) Return(_a0 repositories.CommonUpdateReply, _a1 error) *Account_UpdateUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Account_UpdateUserRole_Call) RunAndReturn(run func(context.Context, repositories.UpdateUserRoleRequest) (repositories.CommonUpdateReply, error)) *Account_UpdateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVerifiedAccount provides a mock function with given fields: _a0, _a1
func (_m *Account) UpdateVerifiedAccount(_a0 context.Context, _a1 repositories.UpdateVerifiedAccountRequest) (repositories.CommonUpdateReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 repositories.CommonUpdateReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateVerifiedAccountRequest) (repositories.CommonUpdateReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateVerifiedAccountRequest) repositories.CommonUpdateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(repositories.CommonUpdateReply)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.UpdateVerifiedAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Account_UpdateVerifiedAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVerifiedAccount'
type Account_UpdateVerifiedAccount_Call struct {
	*mock.Call
}

// UpdateVerifiedAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 repositories.UpdateVerifiedAccountRequest
func (_e *Account_Expecter) UpdateVerifiedAccount(_a0 interface{}, _a1 interface{}) *Account_UpdateVerifiedAccount_Call {
	return &Account_UpdateVerifiedAccount_Call{Call: _e.mock.On("UpdateVerifiedAccount", _a0, _a1)}
}

func (_c *Account_UpdateVerifiedAccount_Call) Run(run func(_a0 context.Context, _a1 repositories.UpdateVerifiedAccountRequest)) *Account_UpdateVerifiedAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.UpdateVerifiedAccountRequest))
	})
	return _c
}

func (_c *Account_UpdateVerifiedAccount_Call) Return(_a0 repositories.CommonUpdateReply, _a1 error) *Account_UpdateVerifiedAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Account_UpdateVerifiedAccount_Call) RunAndReturn(run func(context.Context, repositories.UpdateVerifiedAccountRequest) (repositories.CommonUpdateReply, error)) *Account_UpdateVerifiedAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccount creates a new instance of Account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *Account {
	mock := &Account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/quocbang/grpc-gateway/server/repositories"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Transactions is an autogenerated mock type for the Transactions type
type Transactions struct {
	mock.Mock
}

type Transactions_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactions) EXPECT() *Transactions_Expecter {
	return &Transactions_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: _a0, _a1
func (_m *Transactions) BeginTx(_a0 context.Context, _a1 ...*sql.TxOptions) (repositories.Repositories, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 repositories.Repositories
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*sql.TxOptions) (repositories.Repositories, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*sql.TxOptions) repositories.Repositories); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.Repositories)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*sql.TxOptions) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactions_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type Transactions_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...*sql.TxOptions
func (_e *Transactions_Expecter) BeginTx(_a0 interface{}, _a1 ...interface{}) *Transactions_BeginTx_Call {
	return &Transactions_BeginTx_Call{Call: _e.mock.On("BeginTx",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *Transactions_BeginTx_Call) Run(run func(_a0 context.Context, _a1 ...*sql.TxOptions)) *Transactions_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*sql.TxOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*sql.TxOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Transactions_BeginTx_Call) Return(_a0 repositories.Repositories, _a1 error) *Transactions_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transactions_BeginTx_Call) RunAndReturn(run func(context.Context, ...*sql.TxOptions) (repositories.Repositories, error)) *Transactions_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Transactions) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactions_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Transactions_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Transactions_Expecter) Close() *Transactions_Close_Call {
	return &Transactions_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Transactions_Close_Call) Run(run func()) *Transactions_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactions_Close_Call) Return(_a0 error) *Transactions_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactions_Close_Call) RunAndReturn(run func() error) *Transactions_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields:
func (_m *Transactions) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactions_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Transactions_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *Transactions_Expecter) Commit() *Transactions_Commit_Call {
	return &Transactions_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *Transactions_Commit_Call) Run(run func()) *Transactions_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactions_Commit_Call) Return(_a0 error) *Transactions_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactions_Commit_Call) RunAndReturn(run func() error) *Transactions_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields:
func (_m *Transactions) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactions_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Transactions_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *Transactions_Expecter) Rollback() *Transactions_Rollback_Call {
	return &Transactions_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *Transactions_Rollback_Call) Run(run func()) *Transactions_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactions_Rollback_Call) Return(_a0 error) *Transactions_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactions_Rollback_Call) RunAndReturn(run func() error) *Transactions_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactions creates a new instance of Transactions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactions(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transactions {
	mock := &Transactions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

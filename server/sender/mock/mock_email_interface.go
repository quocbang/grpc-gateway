// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EmailInterface is an autogenerated mock type for the EmailInterface type
type EmailInterface struct {
	mock.Mock
}

type EmailInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailInterface) EXPECT() *EmailInterface_Expecter {
	return &EmailInterface_Expecter{mock: &_m.Mock}
}

// SendVerifyEmail provides a mock function with given fields: ctx, to, subject, content
func (_m *EmailInterface) SendVerifyEmail(ctx context.Context, to string, subject string, content string) error {
	ret := _m.Called(ctx, to, subject, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, to, subject, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailInterface_SendVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerifyEmail'
type EmailInterface_SendVerifyEmail_Call struct {
	*mock.Call
}

// SendVerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - to string
//   - subject string
//   - content string
func (_e *EmailInterface_Expecter) SendVerifyEmail(ctx interface{}, to interface{}, subject interface{}, content interface{}) *EmailInterface_SendVerifyEmail_Call {
	return &EmailInterface_SendVerifyEmail_Call{Call: _e.mock.On("SendVerifyEmail", ctx, to, subject, content)}
}

func (_c *EmailInterface_SendVerifyEmail_Call) Run(run func(ctx context.Context, to string, subject string, content string)) *EmailInterface_SendVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *EmailInterface_SendVerifyEmail_Call) Return(_a0 error) *EmailInterface_SendVerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailInterface_SendVerifyEmail_Call) RunAndReturn(run func(context.Context, string, string, string) error) *EmailInterface_SendVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailInterface creates a new instance of EmailInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailInterface {
	mock := &EmailInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	sender "github.com/quocbang/grpc-gateway/server/sender"
	mock "github.com/stretchr/testify/mock"
)

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

type Sender_Expecter struct {
	mock *mock.Mock
}

func (_m *Sender) EXPECT() *Sender_Expecter {
	return &Sender_Expecter{mock: &_m.Mock}
}

// Email provides a mock function with given fields:
func (_m *Sender) Email() sender.Emails {
	ret := _m.Called()

	var r0 sender.Emails
	if rf, ok := ret.Get(0).(func() sender.Emails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sender.Emails)
		}
	}

	return r0
}

// Sender_Email_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Email'
type Sender_Email_Call struct {
	*mock.Call
}

// Email is a helper method to define mock.On call
func (_e *Sender_Expecter) Email() *Sender_Email_Call {
	return &Sender_Email_Call{Call: _e.mock.On("Email")}
}

func (_c *Sender_Email_Call) Run(run func()) *Sender_Email_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sender_Email_Call) Return(_a0 sender.Emails) *Sender_Email_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sender_Email_Call) RunAndReturn(run func() sender.Emails) *Sender_Email_Call {
	_c.Call.Return(run)
	return _c
}

// NewSender creates a new instance of Sender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
